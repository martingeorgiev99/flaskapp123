<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Sales Forecast</title>
  <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
  <style>
    body, html {
      height: 100%;
      margin: 0;
      font-family: Arial, Helvetica, sans-serif;
      color: white;
      background: #000;
      overflow: hidden;
    }
    #forecastForm {
      position: relative;
      z-index: 2;
      background: rgba(0, 0, 0, 0.5);
      padding: 10px;
      border-radius: 10px;
      margin: 10px auto;
      width: 400px;
      text-align: center;
      box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.5);
    }
    input[type="file"], input[type="submit"] {
      padding: 10px;
      margin-bottom: 10px;
      background-color: white;
      color: black;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }
    input[type="submit"]:hover {
      background-color: white;
    }
    #forecastPlot, #forecastError, #forecastMetrics, #exactPredictions {
      position: relative;
      z-index: 2;
      text-align: center;
      padding-top: 15px;
      font-size: 1.1em;
      line-height: 1;
    }
    #forecastPlot {
      margin: 0 auto;
      margin-top: 15px;
      width: 80%;
      max-width: 800px;
      display: flex;
      justify-content: center;
    }
    h1 {
      margin-top: 10px;
      font-size: 1.8em;
    }
    .background {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: black;
      z-index: 1;
      overflow: hidden;
    }
    canvas {
      display: block;
      position: absolute;
      top: 0;
      left: 0;
    }
  </style>
</head>
<body>
  <div class="background"><canvas id="particles-js"></canvas></div>
  <h1 style="text-align: center; position: relative; z-index: 2; color: white">
    Upload CSV for Sales Forecast
  </h1>
  <form id="forecastForm" action="/forecast" method="POST" enctype="multipart/form-data">
    <input type="file" name="file" required />
    <input type="submit" value="Upload" />
  </form>
  <div id="forecastPlot"></div>
  <div id="forecastError"></div>
  <div id="forecastMetrics"></div>
  <div id="exactPredictions"></div>

  <script>
    // Forecast form submission logic
    const form = document.getElementById("forecastForm");
    form.addEventListener("submit", async function (event) {
      event.preventDefault();
      const formData = new FormData(form);
      const response = await fetch("/forecast", {
        method: "POST",
        body: formData,
      });
      const result = await response.json();
      if (result.error) {
        document.getElementById("forecastError").innerHTML =
          "<strong>Error: </strong>" + result.error;
      } else {
        document.getElementById("forecastMetrics").innerHTML =
          "<strong>MAE: </strong>" +
          result.mae +
          "<br><strong>RÂ²: </strong>" +
          result.r2;
        const formattedPredictions = result.exact_predictions
          .map((pred) => {
            return `Date: ${new Date(
              pred.ds
            ).toLocaleDateString()}<br>Predicted Orders: ${pred.yhat.toFixed(
              2
            )}`;
          })
          .join("<br><br>");
        document.getElementById("exactPredictions").innerHTML =
          "<strong>Predicted Values: </strong><br>" + formattedPredictions;

        // Parse the plot data
        const plotData = JSON.parse(result.plot).data;

        // Plotly new plot with dark theme and updated trace colors
        Plotly.newPlot(
          "forecastPlot",
          plotData, // Use updated plot data
          {
            plot_bgcolor: "#FFFFFF", // Light background for the plot area
            paper_bgcolor: "#FFFFFF", // Light background for the entire plot
            font: {
              color: "#000000"
            },
            xaxis: {
              tickcolor: "#000000",
              tickfont: {
                color: "#000000"
              },
              titlefont: {
                color: "#000000"
              }
            },
            yaxis: {
              tickcolor: "#000000",
              tickfont: {
                color: "#000000"
              },
              titlefont: {
                color: "#000000"
              }
            }
          }
        );
      }
    });

    // Particle animation with connections and parallax effect
    const canvas = document.getElementById("particles-js");
    const ctx = canvas.getContext("2d");
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    const particles = Array.from({ length: 250 }, () => new Particle());
    const maxDistance = 120;
    const mouse = { x: null, y: null, radius: 250 };

    // Update mouse position on move
    canvas.addEventListener("mousemove", (event) => {
      mouse.x = event.x;
      mouse.y = event.y;
    });

    // Clear mouse position when it leaves the canvas
    canvas.addEventListener("mouseleave", () => {
      mouse.x = null;
      mouse.y = null;
    });

    // Particle Class Definition
    function Particle() {
      this.x = Math.random() * canvas.width;
      this.y = Math.random() * canvas.height;
      this.speedX = (Math.random() - 0.5) * 2; // Random speed between -1 and 1
      this.speedY = (Math.random() - 0.5) * 2;
      this.radius = Math.random() * 3 + 1; // Random radius for each particle
    }

    // Update function to control particle movement and no-entry zone behavior
    Particle.prototype.update = function () {
      this.x += this.speedX;
      this.y += this.speedY;

      // Bounce particles at canvas edges
      if (this.x < 0 || this.x > canvas.width) this.speedX *= -1;
      if (this.y < 0 || this.y > canvas.height) this.speedY *= -1;

      // Check distance from mouse and apply repel effect if within no-entry radius
      if (mouse.x !== null && mouse.y !== null) {
        const dx = mouse.x - this.x;
        const dy = mouse.y - this.y;
        const distance = Math.sqrt(dx * dx + dy * dy);

        // Only apply repel if within the defined radius
        if (distance < mouse.radius) {
          const angle = Math.atan2(dy, dx);
          const moveX = Math.cos(angle);
          const moveY = Math.sin(angle);
          this.x -= moveX; // Push particle away from mouse
          this.y -= moveY;
        }
      }
    };

    // Draw function to render particles on canvas
    Particle.prototype.draw = function () {
      ctx.beginPath();
      ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
      ctx.closePath();
      ctx.fillStyle = "rgba(255, 255, 255, 0.8)"; // Particle color
      ctx.fill();
    };

    // Connect particles that are close enough to each other
    function connectParticles() {
      for (let i = 0; i < particles.length; i++) {
        for (let j = i + 1; j < particles.length; j++) {
          const dx = particles[i].x - particles[j].x;
          const dy = particles[i].y - particles[j].y;
          const distance = Math.sqrt(dx * dx + dy * dy);
          if (distance < maxDistance) {
            ctx.beginPath();
            ctx.moveTo(particles[i].x, particles[i].y);
            ctx.lineTo(particles[j].x, particles[j].y);
            ctx.strokeStyle = `rgba(255, 255, 255, ${1 - distance / maxDistance})`;
            ctx.lineWidth = 0.5;
            ctx.stroke();
          }
        }
      }
    }

    // Animate function to continuously update and render particles
    function animateParticles() {
      ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear canvas for each frame
      particles.forEach((particle) => {
        particle.update();
        particle.draw();
      });
      connectParticles(); // Connect particles that are close to each other
      requestAnimationFrame(animateParticles); // Loop animation
    }

    // Start animation
    animateParticles();
  </script>
</body>
</html>
